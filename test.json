{
    "cells": [{
            "cell_type": "code",
            "execution_count": 1,
            "metadata": {},
            "outputs": [],
            "source": [
                "#import all necessary packages\n",
                "import pandas as pd\n",
                "import numpy as np\n",
                "import matplotlib.pyplot as plt\n",
                "\n",
                "from sklearn.neighbors import KNeighborsClassifier\n",
                "from sklearn.linear_model import LogisticRegression\n",
                "from sklearn.naive_bayes import MultinomialNB\n",
                "from sklearn.svm import LinearSVC\n",
                "from sklearn.metrics import confusion_matrix,auc,roc_auc_score,f1_score\n",
                "from sklearn.preprocessing import StandardScaler\n",
                "from sklearn.model_selection import train_test_split,RandomizedSearchCV\n",
                "from sklearn.feature_extraction.text import TfidfVectorizer\n",
                "from scikitplot.metrics import plot_confusion_matrix\n",
                "\n",
                "from tqdm import tqdm\n",
                "import re\n",
                "from bs4 import BeautifulSoup\n",
                "%matplotlib inline\n",
                "import warnings\n",
                "warnings.simplefilter(action='ignore', category=FutureWarning)\n"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 2,
            "metadata": {},
            "outputs": [{
                "data": {
                    "text/html": [
                        "<div>\n",
                        "<style scoped>\n",
                        "    .dataframe tbody tr th:only-of-type {\n",
                        "        vertical-align: middle;\n",
                        "    }\n",
                        "\n",
                        "    .dataframe tbody tr th {\n",
                        "        vertical-align: top;\n",
                        "    }\n",
                        "\n",
                        "    .dataframe thead th {\n",
                        "        text-align: right;\n",
                        "    }\n",
                        "</style>\n",
                        "<table border=\"1\" class=\"dataframe\">\n",
                        "  <thead>\n",
                        "    <tr style=\"text-align: right;\">\n",
                        "      <th></th>\n",
                        "      <th>Id</th>\n",
                        "      <th>ProductId</th>\n",
                        "      <th>UserId</th>\n",
                        "      <th>ProfileName</th>\n",
                        "      <th>HelpfulnessNumerator</th>\n",
                        "      <th>HelpfulnessDenominator</th>\n",
                        "      <th>Score</th>\n",
                        "      <th>Time</th>\n",
                        "      <th>Summary</th>\n",
                        "      <th>Text</th>\n",
                        "    </tr>\n",
                        "  </thead>\n",
                        "  <tbody>\n",
                        "    <tr>\n",
                        "      <td>0</td>\n",
                        "      <td>1</td>\n",
                        "      <td>B001E4KFG0</td>\n",
                        "      <td>A3SGXH7AUHU8GW</td>\n",
                        "      <td>delmartian</td>\n",
                        "      <td>1</td>\n",
                        "      <td>1</td>\n",
                        "      <td>5</td>\n",
                        "      <td>1303862400</td>\n",
                        "      <td>Good Quality Dog Food</td>\n",
                        "      <td>I have bought several of the Vitality canned d...</td>\n",
                        "    </tr>\n",
                        "    <tr>\n",
                        "      <td>1</td>\n",
                        "      <td>2</td>\n",
                        "      <td>B00813GRG4</td>\n",
                        "      <td>A1D87F6ZCVE5NK</td>\n",
                        "      <td>dll pa</td>\n",
                        "      <td>0</td>\n",
                        "      <td>0</td>\n",
                        "      <td>1</td>\n",
                        "      <td>1346976000</td>\n",
                        "      <td>Not as Advertised</td>\n",
                        "      <td>Product arrived labeled as Jumbo Salted Peanut...</td>\n",
                        "    </tr>\n",
                        "    <tr>\n",
                        "      <td>2</td>\n",
                        "      <td>3</td>\n",
                        "      <td>B000LQOCH0</td>\n",
                        "      <td>ABXLMWJIXXAIN</td>\n",
                        "      <td>Natalia Corres \"Natalia Corres\"</td>\n",
                        "      <td>1</td>\n",
                        "      <td>1</td>\n",
                        "      <td>4</td>\n",
                        "      <td>1219017600</td>\n",
                        "      <td>\"Delight\" says it all</td>\n",
                        "      <td>This is a confection that has been around a fe...</td>\n",
                        "    </tr>\n",
                        "    <tr>\n",
                        "      <td>3</td>\n",
                        "      <td>4</td>\n",
                        "      <td>B000UA0QIQ</td>\n",
                        "      <td>A395BORC6FGVXV</td>\n",
                        "      <td>Karl</td>\n",
                        "      <td>3</td>\n",
                        "      <td>3</td>\n",
                        "      <td>2</td>\n",
                        "      <td>1307923200</td>\n",
                        "      <td>Cough Medicine</td>\n",
                        "      <td>If you are looking for the secret ingredient i...</td>\n",
                        "    </tr>\n",
                        "    <tr>\n",
                        "      <td>4</td>\n",
                        "      <td>5</td>\n",
                        "      <td>B006K2ZZ7K</td>\n",
                        "      <td>A1UQRSCLF8GW1T</td>\n",
                        "      <td>Michael D. Bigham \"M. Wassir\"</td>\n",
                        "      <td>0</td>\n",
                        "      <td>0</td>\n",
                        "      <td>5</td>\n",
                        "      <td>1350777600</td>\n",
                        "      <td>Great taffy</td>\n",
                        "      <td>Great taffy at a great price.  There was a wid...</td>\n",
                        "    </tr>\n",
                        "  </tbody>\n",
                        "</table>\n",
                        "</div>"
                    ],
                    "text/plain": [
                        "   Id   ProductId          UserId                      ProfileName  \\\n",
                        "0   1  B001E4KFG0  A3SGXH7AUHU8GW                       delmartian   \n",
                        "1   2  B00813GRG4  A1D87F6ZCVE5NK                           dll pa   \n",
                        "2   3  B000LQOCH0   ABXLMWJIXXAIN  Natalia Corres \"Natalia Corres\"   \n",
                        "3   4  B000UA0QIQ  A395BORC6FGVXV                             Karl   \n",
                        "4   5  B006K2ZZ7K  A1UQRSCLF8GW1T    Michael D. Bigham \"M. Wassir\"   \n",
                        "\n",
                        "   HelpfulnessNumerator  HelpfulnessDenominator  Score        Time  \\\n",
                        "0                     1                       1      5  1303862400   \n",
                        "1                     0                       0      1  1346976000   \n",
                        "2                     1                       1      4  1219017600   \n",
                        "3                     3                       3      2  1307923200   \n",
                        "4                     0                       0      5  1350777600   \n",
                        "\n",
                        "                 Summary                                               Text  \n",
                        "0  Good Quality Dog Food  I have bought several of the Vitality canned d...  \n",
                        "1      Not as Advertised  Product arrived labeled as Jumbo Salted Peanut...  \n",
                        "2  \"Delight\" says it all  This is a confection that has been around a fe...  \n",
                        "3         Cough Medicine  If you are looking for the secret ingredient i...  \n",
                        "4            Great taffy  Great taffy at a great price.  There was a wid...  "
                    ]
                },
                "execution_count": 2,
                "metadata": {},
                "output_type": "execute_result"
            }],
            "source": [
                "#read the data\n",
                "reviews=pd.read_csv(\"Reviews.csv\")\n",
                "reviews=reviews[:40000]\n",
                "reviews.head()"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 3,
            "metadata": {},
            "outputs": [{
                "data": {
                    "text/html": [
                        "<div>\n",
                        "<style scoped>\n",
                        "    .dataframe tbody tr th:only-of-type {\n",
                        "        vertical-align: middle;\n",
                        "    }\n",
                        "\n",
                        "    .dataframe tbody tr th {\n",
                        "        vertical-align: top;\n",
                        "    }\n",
                        "\n",
                        "    .dataframe thead th {\n",
                        "        text-align: right;\n",
                        "    }\n",
                        "</style>\n",
                        "<table border=\"1\" class=\"dataframe\">\n",
                        "  <thead>\n",
                        "    <tr style=\"text-align: right;\">\n",
                        "      <th></th>\n",
                        "      <th>Id</th>\n",
                        "      <th>ProductId</th>\n",
                        "      <th>UserId</th>\n",
                        "      <th>ProfileName</th>\n",
                        "      <th>HelpfulnessNumerator</th>\n",
                        "      <th>HelpfulnessDenominator</th>\n",
                        "      <th>Score</th>\n",
                        "      <th>Time</th>\n",
                        "      <th>Summary</th>\n",
                        "      <th>Text</th>\n",
                        "    </tr>\n",
                        "  </thead>\n",
                        "  <tbody>\n",
                        "    <tr>\n",
                        "      <td>0</td>\n",
                        "      <td>1</td>\n",
                        "      <td>B001E4KFG0</td>\n",
                        "      <td>A3SGXH7AUHU8GW</td>\n",
                        "      <td>delmartian</td>\n",
                        "      <td>1</td>\n",
                        "      <td>1</td>\n",
                        "      <td>1</td>\n",
                        "      <td>1303862400</td>\n",
                        "      <td>Good Quality Dog Food</td>\n",
                        "      <td>I have bought several of the Vitality canned d...</td>\n",
                        "    </tr>\n",
                        "    <tr>\n",
                        "      <td>1</td>\n",
                        "      <td>2</td>\n",
                        "      <td>B00813GRG4</td>\n",
                        "      <td>A1D87F6ZCVE5NK</td>\n",
                        "      <td>dll pa</td>\n",
                        "      <td>0</td>\n",
                        "      <td>0</td>\n",
                        "      <td>0</td>\n",
                        "      <td>1346976000</td>\n",
                        "      <td>Not as Advertised</td>\n",
                        "      <td>Product arrived labeled as Jumbo Salted Peanut...</td>\n",
                        "    </tr>\n",
                        "    <tr>\n",
                        "      <td>2</td>\n",
                        "      <td>3</td>\n",
                        "      <td>B000LQOCH0</td>\n",
                        "      <td>ABXLMWJIXXAIN</td>\n",
                        "      <td>Natalia Corres \"Natalia Corres\"</td>\n",
                        "      <td>1</td>\n",
                        "      <td>1</td>\n",
                        "      <td>1</td>\n",
                        "      <td>1219017600</td>\n",
                        "      <td>\"Delight\" says it all</td>\n",
                        "      <td>This is a confection that has been around a fe...</td>\n",
                        "    </tr>\n",
                        "    <tr>\n",
                        "      <td>3</td>\n",
                        "      <td>4</td>\n",
                        "      <td>B000UA0QIQ</td>\n",
                        "      <td>A395BORC6FGVXV</td>\n",
                        "      <td>Karl</td>\n",
                        "      <td>3</td>\n",
                        "      <td>3</td>\n",
                        "      <td>0</td>\n",
                        "      <td>1307923200</td>\n",
                        "      <td>Cough Medicine</td>\n",
                        "      <td>If you are looking for the secret ingredient i...</td>\n",
                        "    </tr>\n",
                        "    <tr>\n",
                        "      <td>4</td>\n",
                        "      <td>5</td>\n",
                        "      <td>B006K2ZZ7K</td>\n",
                        "      <td>A1UQRSCLF8GW1T</td>\n",
                        "      <td>Michael D. Bigham \"M. Wassir\"</td>\n",
                        "      <td>0</td>\n",
                        "      <td>0</td>\n",
                        "      <td>1</td>\n",
                        "      <td>1350777600</td>\n",
                        "      <td>Great taffy</td>\n",
                        "      <td>Great taffy at a great price.  There was a wid...</td>\n",
                        "    </tr>\n",
                        "  </tbody>\n",
                        "</table>\n",
                        "</div>"
                    ],
                    "text/plain": [
                        "   Id   ProductId          UserId                      ProfileName  \\\n",
                        "0   1  B001E4KFG0  A3SGXH7AUHU8GW                       delmartian   \n",
                        "1   2  B00813GRG4  A1D87F6ZCVE5NK                           dll pa   \n",
                        "2   3  B000LQOCH0   ABXLMWJIXXAIN  Natalia Corres \"Natalia Corres\"   \n",
                        "3   4  B000UA0QIQ  A395BORC6FGVXV                             Karl   \n",
                        "4   5  B006K2ZZ7K  A1UQRSCLF8GW1T    Michael D. Bigham \"M. Wassir\"   \n",
                        "\n",
                        "   HelpfulnessNumerator  HelpfulnessDenominator  Score        Time  \\\n",
                        "0                     1                       1      1  1303862400   \n",
                        "1                     0                       0      0  1346976000   \n",
                        "2                     1                       1      1  1219017600   \n",
                        "3                     3                       3      0  1307923200   \n",
                        "4                     0                       0      1  1350777600   \n",
                        "\n",
                        "                 Summary                                               Text  \n",
                        "0  Good Quality Dog Food  I have bought several of the Vitality canned d...  \n",
                        "1      Not as Advertised  Product arrived labeled as Jumbo Salted Peanut...  \n",
                        "2  \"Delight\" says it all  This is a confection that has been around a fe...  \n",
                        "3         Cough Medicine  If you are looking for the secret ingredient i...  \n",
                        "4            Great taffy  Great taffy at a great price.  There was a wid...  "
                    ]
                },
                "execution_count": 3,
                "metadata": {},
                "output_type": "execute_result"
            }],
            "source": [
                "#Lets convert our sccores to three labels 0,1,2 for , negative(score>3),Positive(score>3),neutral(score==3)\n",
                "def label(x):\n",
                "    if x>3:\n",
                "        return 1\n",
                "    elif x<3:\n",
                "        return 0\n",
                "    elif x==3:\n",
                "        return 2\n",
                "reviews[\"Score\"]=reviews[\"Score\"].map(label)\n",
                "reviews.head()"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 4,
            "metadata": {},
            "outputs": [{
                "data": {
                    "text/html": [
                        "<div>\n",
                        "<style scoped>\n",
                        "    .dataframe tbody tr th:only-of-type {\n",
                        "        vertical-align: middle;\n",
                        "    }\n",
                        "\n",
                        "    .dataframe tbody tr th {\n",
                        "        vertical-align: top;\n",
                        "    }\n",
                        "\n",
                        "    .dataframe thead th {\n",
                        "        text-align: right;\n",
                        "    }\n",
                        "</style>\n",
                        "<table border=\"1\" class=\"dataframe\">\n",
                        "  <thead>\n",
                        "    <tr style=\"text-align: right;\">\n",
                        "      <th></th>\n",
                        "      <th>Id</th>\n",
                        "      <th>ProductId</th>\n",
                        "      <th>UserId</th>\n",
                        "      <th>ProfileName</th>\n",
                        "      <th>HelpfulnessNumerator</th>\n",
                        "      <th>HelpfulnessDenominator</th>\n",
                        "      <th>Score</th>\n",
                        "      <th>Time</th>\n",
                        "      <th>Summary</th>\n",
                        "      <th>Text</th>\n",
                        "    </tr>\n",
                        "  </thead>\n",
                        "  <tbody>\n",
                        "    <tr>\n",
                        "      <td>29</td>\n",
                        "      <td>30</td>\n",
                        "      <td>B0001PB9FY</td>\n",
                        "      <td>A3HDKO7OW0QNK4</td>\n",
                        "      <td>Canadian Fan</td>\n",
                        "      <td>1</td>\n",
                        "      <td>1</td>\n",
                        "      <td>1</td>\n",
                        "      <td>1107820800</td>\n",
                        "      <td>The Best Hot Sauce in the World</td>\n",
                        "      <td>I don't know if it's the cactus or the tequila...</td>\n",
                        "    </tr>\n",
                        "    <tr>\n",
                        "      <td>574</td>\n",
                        "      <td>575</td>\n",
                        "      <td>B000G6RYNE</td>\n",
                        "      <td>A3PJZ8TU8FDQ1K</td>\n",
                        "      <td>Jared Castle</td>\n",
                        "      <td>2</td>\n",
                        "      <td>2</td>\n",
                        "      <td>1</td>\n",
                        "      <td>1231718400</td>\n",
                        "      <td>One bite and you'll become a \"chippoisseur\"</td>\n",
                        "      <td>I'm addicted to salty and tangy flavors, so wh...</td>\n",
                        "    </tr>\n",
                        "    <tr>\n",
                        "      <td>1973</td>\n",
                        "      <td>1974</td>\n",
                        "      <td>B0017165OG</td>\n",
                        "      <td>A2EPNS38TTLZYN</td>\n",
                        "      <td>tedebear</td>\n",
                        "      <td>0</td>\n",
                        "      <td>0</td>\n",
                        "      <td>2</td>\n",
                        "      <td>1312675200</td>\n",
                        "      <td>Pok Chops</td>\n",
                        "      <td>The pork chops from Omaha Steaks were very tas...</td>\n",
                        "    </tr>\n",
                        "    <tr>\n",
                        "      <td>2309</td>\n",
                        "      <td>2310</td>\n",
                        "      <td>B0001VWE0M</td>\n",
                        "      <td>AQM74O8Z4FMS0</td>\n",
                        "      <td>Sunshine</td>\n",
                        "      <td>0</td>\n",
                        "      <td>0</td>\n",
                        "      <td>0</td>\n",
                        "      <td>1127606400</td>\n",
                        "      <td>Below standard</td>\n",
                        "      <td>Too much of the white pith on this orange peel...</td>\n",
                        "    </tr>\n",
                        "    <tr>\n",
                        "      <td>2323</td>\n",
                        "      <td>2324</td>\n",
                        "      <td>B0001VWE0C</td>\n",
                        "      <td>AQM74O8Z4FMS0</td>\n",
                        "      <td>Sunshine</td>\n",
                        "      <td>0</td>\n",
                        "      <td>0</td>\n",
                        "      <td>0</td>\n",
                        "      <td>1127606400</td>\n",
                        "      <td>Below standard</td>\n",
                        "      <td>Too much of the white pith on this orange peel...</td>\n",
                        "    </tr>\n",
                        "    <tr>\n",
                        "      <td>...</td>\n",
                        "      <td>...</td>\n",
                        "      <td>...</td>\n",
                        "      <td>...</td>\n",
                        "      <td>...</td>\n",
                        "      <td>...</td>\n",
                        "      <td>...</td>\n",
                        "      <td>...</td>\n",
                        "      <td>...</td>\n",
                        "      <td>...</td>\n",
                        "      <td>...</td>\n",
                        "    </tr>\n",
                        "    <tr>\n",
                        "      <td>39976</td>\n",
                        "      <td>39977</td>\n",
                        "      <td>B001TZJ3OE</td>\n",
                        "      <td>A3908E1G8IL52G</td>\n",
                        "      <td>Jessica Ztardust</td>\n",
                        "      <td>1</td>\n",
                        "      <td>2</td>\n",
                        "      <td>1</td>\n",
                        "      <td>1312243200</td>\n",
                        "      <td>Highly Addicting!</td>\n",
                        "      <td>I did not purchase this product off of Amazon....</td>\n",
                        "    </tr>\n",
                        "    <tr>\n",
                        "      <td>39977</td>\n",
                        "      <td>39978</td>\n",
                        "      <td>B001TZJ3OE</td>\n",
                        "      <td>AF1PV3DIC0XM7</td>\n",
                        "      <td>Robert Ashton</td>\n",
                        "      <td>1</td>\n",
                        "      <td>2</td>\n",
                        "      <td>1</td>\n",
                        "      <td>1081555200</td>\n",
                        "      <td>Classic Condiment</td>\n",
                        "      <td>Mae Ploy Sweet Chili Sauce is becoming a stand...</td>\n",
                        "    </tr>\n",
                        "    <tr>\n",
                        "      <td>39978</td>\n",
                        "      <td>39979</td>\n",
                        "      <td>B001TZJ3OE</td>\n",
                        "      <td>A1VTHOTQFPRFVT</td>\n",
                        "      <td>jumperboy</td>\n",
                        "      <td>0</td>\n",
                        "      <td>1</td>\n",
                        "      <td>2</td>\n",
                        "      <td>1301961600</td>\n",
                        "      <td>Just Okay, Too Sweet</td>\n",
                        "      <td>I was excited to try this sauce based on the r...</td>\n",
                        "    </tr>\n",
                        "    <tr>\n",
                        "      <td>39979</td>\n",
                        "      <td>39980</td>\n",
                        "      <td>B001TZJ3OE</td>\n",
                        "      <td>AAJ1IYOUIHWF</td>\n",
                        "      <td>D. Sun</td>\n",
                        "      <td>1</td>\n",
                        "      <td>11</td>\n",
                        "      <td>2</td>\n",
                        "      <td>1243036800</td>\n",
                        "      <td>Too much</td>\n",
                        "      <td>These are very large bottles. It is a good dip...</td>\n",
                        "    </tr>\n",
                        "    <tr>\n",
                        "      <td>39980</td>\n",
                        "      <td>39981</td>\n",
                        "      <td>B001TZJ3OE</td>\n",
                        "      <td>A3E3YJO2V3YZUM</td>\n",
                        "      <td>Lidgemeister</td>\n",
                        "      <td>2</td>\n",
                        "      <td>15</td>\n",
                        "      <td>0</td>\n",
                        "      <td>1295481600</td>\n",
                        "      <td>Guess I'm in the Minority</td>\n",
                        "      <td>I was looking for a good sweet and sour sauce ...</td>\n",
                        "    </tr>\n",
                        "  </tbody>\n",
                        "</table>\n",
                        "<p>2548 rows × 10 columns</p>\n",
                        "</div>"
                    ],
                    "text/plain": [
                        "          Id   ProductId          UserId       ProfileName  \\\n",
                        "29        30  B0001PB9FY  A3HDKO7OW0QNK4      Canadian Fan   \n",
                        "574      575  B000G6RYNE  A3PJZ8TU8FDQ1K      Jared Castle   \n",
                        "1973    1974  B0017165OG  A2EPNS38TTLZYN          tedebear   \n",
                        "2309    2310  B0001VWE0M   AQM74O8Z4FMS0          Sunshine   \n",
                        "2323    2324  B0001VWE0C   AQM74O8Z4FMS0          Sunshine   \n",
                        "...      ...         ...             ...               ...   \n",
                        "39976  39977  B001TZJ3OE  A3908E1G8IL52G  Jessica Ztardust   \n",
                        "39977  39978  B001TZJ3OE   AF1PV3DIC0XM7     Robert Ashton   \n",
                        "39978  39979  B001TZJ3OE  A1VTHOTQFPRFVT         jumperboy   \n",
                        "39979  39980  B001TZJ3OE    AAJ1IYOUIHWF            D. Sun   \n",
                        "39980  39981  B001TZJ3OE  A3E3YJO2V3YZUM      Lidgemeister   \n",
                        "\n",
                        "       HelpfulnessNumerator  HelpfulnessDenominator  Score        Time  \\\n",
                        "29                        1                       1      1  1107820800   \n",
                        "574                       2                       2      1  1231718400   \n",
                        "1973                      0                       0      2  1312675200   \n",
                        "2309                      0                       0      0  1127606400   \n",
                        "2323                      0                       0      0  1127606400   \n",
                        "...                     ...                     ...    ...         ...   \n",
                        "39976                     1                       2      1  1312243200   \n",
                        "39977                     1                       2      1  1081555200   \n",
                        "39978                     0                       1      2  1301961600   \n",
                        "39979                     1                      11      2  1243036800   \n",
                        "39980                     2                      15      0  1295481600   \n",
                        "\n",
                        "                                           Summary  \\\n",
                        "29                 The Best Hot Sauce in the World   \n",
                        "574    One bite and you'll become a \"chippoisseur\"   \n",
                        "1973                                     Pok Chops   \n",
                        "2309                                Below standard   \n",
                        "2323                                Below standard   \n",
                        "...                                            ...   \n",
                        "39976                            Highly Addicting!   \n",
                        "39977                            Classic Condiment   \n",
                        "39978                         Just Okay, Too Sweet   \n",
                        "39979                                     Too much   \n",
                        "39980                    Guess I'm in the Minority   \n",
                        "\n",
                        "                                                    Text  \n",
                        "29     I don't know if it's the cactus or the tequila...  \n",
                        "574    I'm addicted to salty and tangy flavors, so wh...  \n",
                        "1973   The pork chops from Omaha Steaks were very tas...  \n",
                        "2309   Too much of the white pith on this orange peel...  \n",
                        "2323   Too much of the white pith on this orange peel...  \n",
                        "...                                                  ...  \n",
                        "39976  I did not purchase this product off of Amazon....  \n",
                        "39977  Mae Ploy Sweet Chili Sauce is becoming a stand...  \n",
                        "39978  I was excited to try this sauce based on the r...  \n",
                        "39979  These are very large bottles. It is a good dip...  \n",
                        "39980  I was looking for a good sweet and sour sauce ...  \n",
                        "\n",
                        "[2548 rows x 10 columns]"
                    ]
                },
                "execution_count": 4,
                "metadata": {},
                "output_type": "execute_result"
            }],
            "source": [
                "#lets check if our data is having duplicate values\n",
                "reviews[reviews[[\"UserId\",\"ProfileName\",\"Time\",\"Text\"]].duplicated()]"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 5,
            "metadata": {},
            "outputs": [{
                "name": "stdout",
                "output_type": "stream",
                "text": [
                    "Data set size before dropping duplicates (40000, 10)\n",
                    "Data set size after dropping duplicates (37452, 10)\n"
                ]
            }],
            "source": [
                "# we can see in the above cell that there are duplicates in our data. Lets drop all of them.\n",
                "print(\"Data set size before dropping duplicates\",reviews.shape)\n",
                "\n",
                "reviews_df = reviews.drop_duplicates(subset={\"UserId\",\"ProfileName\",\"Time\",\"Text\"},keep='first')\n",
                "\n",
                "print(\"Data set size after dropping duplicates\",reviews_df.shape)"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 6,
            "metadata": {},
            "outputs": [{
                "data": {
                    "text/plain": [
                        "Text     False\n",
                        "Score    False\n",
                        "dtype: bool"
                    ]
                },
                "execution_count": 6,
                "metadata": {},
                "output_type": "execute_result"
            }],
            "source": [
                "#let us find if our data have any missing values\n",
                "# from now on we deal only with Text and Score columns, Text is our feature and score is our label.\n",
                "reviews_df[[\"Text\",\"Score\"]].isnull().any()"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 7,
            "metadata": {},
            "outputs": [{
                "name": "stdout",
                "output_type": "stream",
                "text": [
                    "Amount of data retianed is :  0.9363\n"
                ]
            }],
            "source": [
                "print(\"Amount of data retianed is : \", reviews_df.shape[0]/reviews.shape[0])"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 39,
            "metadata": {},
            "outputs": [],
            "source": [
                "#plt.bar(reviews_df[\"Score\"].unique(),reviews_df[\"Score\"].value_counts())\n",
                "#plt.xticks([0,1,2])\n",
                "#plt.show()"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 9,
            "metadata": {},
            "outputs": [{
                "data": {
                    "image/png": "\n",
                    "text/plain": [
                        "<Figure size 432x288 with 1 Axes>"
                    ]
                },
                "metadata": {},
                "output_type": "display_data"
            }],
            "source": [
                "plt.pie(reviews_df[\"Score\"].value_counts(),autopct='%1.0f%%',radius=2,labels=reviews_df[\"Score\"].unique(),colors=[\"g\",\"r\",\"y\"])\n",
                "plt.title(\"Labels\")"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "#### Observations:\n",
                "1. After removing duplicates and missing values we were able to retain 93.6% of actual data.\n",
                "2. From the above bar plot we can clearly see that our data is imbalanced, biased towards to class 1(positive)."
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "# 3. Data Preprocessing"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "Though we removed noise data, we need to make sure that our data is clean\n",
                "with text data comes a lot of unwanted characters, symbols, numbers and common words which adds no value to the model's performance\n",
                "so we will try to remove these unwanted characters to get a clean data\n"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 10,
            "metadata": {},
            "outputs": [{
                "data": {
                    "text/plain": [
                        "\"Instant oatmeal can become soggy the minute the water hits the bowl. McCann's Instant Oatmeal holds its texture, has excellent flavor, and is good for you all at the same time. McCann's regular oat meal is excellent, too, but may take a bit longer to prepare than most have time for in the morning. This is the best instant brand I've ever eaten, and a very close second to the non-instant variety.<br /><br />McCann's Instant Irish Oatmeal, Variety Pack of Regular, Apples & Cinnamon, and Maple & Brown Sugar, 10-Count Boxes (Pack of 6)\""
                    ]
                },
                "execution_count": 10,
                "metadata": {},
                "output_type": "execute_result"
            }],
            "source": [
                "#21,15,28\n",
                "review34=reviews_df[\"Text\"][34]\n",
                "review34"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 11,
            "metadata": {},
            "outputs": [{
                "name": "stderr",
                "output_type": "stream",
                "text": [
                    "[nltk_data] Downloading package stopwords to\n",
                    "[nltk_data]     C:\\Users\\shari\\AppData\\Roaming\\nltk_data...\n",
                    "[nltk_data]   Package stopwords is already up-to-date!\n"
                ]
            }],
            "source": [
                "import nltk\n",
                "from nltk.stem import PorterStemmer\n",
                "from nltk.tokenize import word_tokenize\n",
                "from nltk.corpus import stopwords\n",
                "nltk.download('stopwords')\n",
                "stop_words = set(stopwords.words('english'))\n",
                "reviews_df=reviews_df[[\"Text\",\"Score\"]]\n"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 12,
            "metadata": {},
            "outputs": [{
                "name": "stdout",
                "output_type": "stream",
                "text": [
                    "{'he', \"wouldn't\", 'should', 'again', 'shan', 'won', 'mightn', 'she', \"mightn't\", 'didn', 'isn', 'but', 'what', \"you'll\", 'very', 'into', 'only', 'ain', 'aren', 'against', \"needn't\", 'whom', \"doesn't\", 'y', 'those', 'i', 'the', 'if', 'me', \"that'll\", 'up', 'themselves', 'with', 'above', 't', 'how', 'ma', 'can', 'at', 'where', 'both', 'no', \"hasn't\", 'wouldn', 'out', 'that', \"you've\", \"won't\", 'about', 'on', 'there', \"shouldn't\", 'doing', 'mustn', 'these', 'does', 'is', 'an', 'this', 'few', 'its', 'been', 'yourselves', 'to', 'here', 'of', \"should've\", 'before', 'which', 'through', 'itself', 'under', 'will', 'd', 'same', 'are', 'or', 'just', 'our', 'between', 'own', 'had', \"weren't\", 'than', \"aren't\", 'haven', 'then', 'himself', 'after', 'why', 'were', 'them', 'once', 'do', 'have', \"mustn't\", 'who', 'm', 'yourself', 'his', 'while', 'as', 'don', \"you're\", \"couldn't\", 'o', 'their', 'until', 'for', 'not', 'it', 're', 'from', 's', 'down', 'now', 'hadn', 'ourselves', \"it's\", 'more', 'has', 'be', 'll', 'theirs', 've', 'weren', 'your', 'hers', 'by', 'when', 'my', 'all', 'shouldn', 'they', \"don't\", \"shan't\", 'was', 'did', 'ours', 'each', 'wasn', 'you', 'such', 'doesn', 'herself', 'nor', 'hasn', 'in', 'needn', \"wasn't\", 'am', 'couldn', 'off', 'so', 'too', 'having', 'any', 'and', 'a', \"you'd\", 'her', 'some', 'below', 'because', 'other', \"didn't\", 'him', 'myself', \"she's\", \"hadn't\", 'during', 'yours', 'further', 'most', \"isn't\", 'over', \"haven't\", 'being', 'we'}\n"
                ]
            }],
            "source": [
                "print(stop_words)"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 13,
            "metadata": {},
            "outputs": [],
            "source": [
                "#let us remove word not from stop words, since it is the one of the most important word in classifing the review.\n",
                "stop_words.remove(\"not\")"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 14,
            "metadata": {},
            "outputs": [],
            "source": [
                "def text_Preprocessing(reviews):\n",
                "    \n",
                "    \n",
                "    \"\"\" This will clean the text data, remove html tags, remove special characters and then tokenize the reviews to apply Stemmer on each word token.\"\"\"\n",
                "    \n",
                "    pre_processed_reviews=[]\n",
                "    \n",
                "    for review in tqdm(reviews):\n",
                "        review= BeautifulSoup(review,'lxml').getText()    #remove html tags\n",
                "        review=re.sub('\\S*\\d\\S*','',review).strip()\n",
                "        review=re.sub('[^A-Za-z]+',' ',review)        #remove special chars\n",
                "        review=re.sub(\"n't\",\"not\",review)\n",
                "        review=word_tokenize(str(review.lower())) #tokenize the reviews into word tokens\n",
                "\n",
                "        # now we will split the review into words and then check if these words are in the stop words if so we will remove them, if not we will join\n",
                "        review=' '.join(PorterStemmer().stem(word) for word in review if word not in stop_words)\n",
                "        pre_processed_reviews.append(review.strip())\n",
                "    return pre_processed_reviews"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 15,
            "metadata": {},
            "outputs": [{
                    "name": "stderr",
                    "output_type": "stream",
                    "text": [
                        "100%|███████████████████████████████████████████████████████████████████████████| 37452/37452 [00:51<00:00, 721.87it/s]\n"
                    ]
                },
                {
                    "data": {
                        "text/plain": [
                            "['bought sever vital can dog food product found good qualiti product look like stew process meat smell better labrador finicki appreci product better',\n",
                            " 'product arriv label jumbo salt peanut peanut actual small size unsalt not sure error vendor intend repres product jumbo',\n",
                            " 'confect around centuri light pillowi citru gelatin nut case filbert cut tini squar liber coat powder sugar tini mouth heaven not chewi flavor highli recommend yummi treat familiar stori c lewi lion witch wardrob treat seduc edmund sell brother sister witch',\n",
                            " 'look secret ingredi robitussin believ found got addit root beer extract order good made cherri soda flavor medicin',\n",
                            " 'great taffi great price wide assort yummi taffi deliveri quick taffi lover deal']"
                        ]
                    },
                    "execution_count": 15,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": [
                "preprocessed_reviews=text_Preprocessing(reviews_df[\"Text\"])\n",
                "preprocessed_reviews[34]"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 16,
            "metadata": {},
            "outputs": [{
                "data": {
                    "text/html": [
                        "<div>\n",
                        "<style scoped>\n",
                        "    .dataframe tbody tr th:only-of-type {\n",
                        "        vertical-align: middle;\n",
                        "    }\n",
                        "\n",
                        "    .dataframe tbody tr th {\n",
                        "        vertical-align: top;\n",
                        "    }\n",
                        "\n",
                        "    .dataframe thead th {\n",
                        "        text-align: right;\n",
                        "    }\n",
                        "</style>\n",
                        "<table border=\"1\" class=\"dataframe\">\n",
                        "  <thead>\n",
                        "    <tr style=\"text-align: right;\">\n",
                        "      <th></th>\n",
                        "      <th>text</th>\n",
                        "      <th>sentiment</th>\n",
                        "    </tr>\n",
                        "  </thead>\n",
                        "  <tbody>\n",
                        "    <tr>\n",
                        "      <td>0</td>\n",
                        "      <td>bought sever vital can dog food product found ...</td>\n",
                        "      <td>1</td>\n",
                        "    </tr>\n",
                        "    <tr>\n",
                        "      <td>1</td>\n",
                        "      <td>product arriv label jumbo salt peanut peanut a...</td>\n",
                        "      <td>0</td>\n",
                        "    </tr>\n",
                        "    <tr>\n",
                        "      <td>2</td>\n",
                        "      <td>confect around centuri light pillowi citru gel...</td>\n",
                        "      <td>1</td>\n",
                        "    </tr>\n",
                        "    <tr>\n",
                        "      <td>3</td>\n",
                        "      <td>look secret ingredi robitussin believ found go...</td>\n",
                        "      <td>0</td>\n",
                        "    </tr>\n",
                        "    <tr>\n",
                        "      <td>4</td>\n",
                        "      <td>great taffi great price wide assort yummi taff...</td>\n",
                        "      <td>1</td>\n",
                        "    </tr>\n",
                        "  </tbody>\n",
                        "</table>\n",
                        "</div>"
                    ],
                    "text/plain": [
                        "                                                text  sentiment\n",
                        "0  bought sever vital can dog food product found ...          1\n",
                        "1  product arriv label jumbo salt peanut peanut a...          0\n",
                        "2  confect around centuri light pillowi citru gel...          1\n",
                        "3  look secret ingredi robitussin believ found go...          0\n",
                        "4  great taffi great price wide assort yummi taff...          1"
                    ]
                },
                "execution_count": 16,
                "metadata": {},
                "output_type": "execute_result"
            }],
            "source": [
                "preprocessed_reviews=pd.DataFrame({\"text\":preprocessed_reviews,\"sentiment\":reviews_df.Score})\n",
                "preprocessed_reviews.head()"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 17,
            "metadata": {},
            "outputs": [{
                "data": {
                    "text/plain": [
                        "1    28875\n",
                        "0     5597\n",
                        "2     2980\n",
                        "Name: sentiment, dtype: int64"
                    ]
                },
                "execution_count": 17,
                "metadata": {},
                "output_type": "execute_result"
            }],
            "source": [
                "preprocessed_reviews.sentiment.value_counts()"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "Observations:\n",
                "1. we cleaned our text data, removed unnecessary tags\n",
                "2. Though we cleaned our data, it is still in string format which computers won't understand, for this we use text featuration."
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "### 3.1.Featurization"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 18,
            "metadata": {},
            "outputs": [{
                "name": "stdout",
                "output_type": "stream",
                "text": [
                    "(28089,) (9363,)\n",
                    "(28089,) (9363,)\n"
                ]
            }],
            "source": [
                "#It is best practice to split the data Before we do text featurization \n",
                "reviews_train,reviews_test,sentiment_train,sentiment_test=train_test_split(preprocessed_reviews.text,preprocessed_reviews.sentiment)\n",
                "print(reviews_train.shape,reviews_test.shape)\n",
                "print(sentiment_train.shape,sentiment_test.shape)"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 19,
            "metadata": {},
            "outputs": [{
                "data": {
                    "text/plain": [
                        "((28089, 6000), (9363, 6000))"
                    ]
                },
                "execution_count": 19,
                "metadata": {},
                "output_type": "execute_result"
            }],
            "source": [
                "tfidf_model=TfidfVectorizer(ngram_range=(1,2),min_df=10, max_features=6000)\n",
                "tfidf_model.fit(reviews_train,sentiment_train)\n",
                "reviews_train_tfidf=tfidf_model.transform(reviews_train)\n",
                "reviews_test_tfidf=tfidf_model.transform(reviews_test)\n",
                "reviews_train_tfidf.shape,reviews_test_tfidf.shape"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 20,
            "metadata": {},
            "outputs": [{
                "data": {
                    "text/html": [
                        "<div>\n",
                        "<style scoped>\n",
                        "    .dataframe tbody tr th:only-of-type {\n",
                        "        vertical-align: middle;\n",
                        "    }\n",
                        "\n",
                        "    .dataframe tbody tr th {\n",
                        "        vertical-align: top;\n",
                        "    }\n",
                        "\n",
                        "    .dataframe thead th {\n",
                        "        text-align: right;\n",
                        "    }\n",
                        "</style>\n",
                        "<table border=\"1\" class=\"dataframe\">\n",
                        "  <thead>\n",
                        "    <tr style=\"text-align: right;\">\n",
                        "      <th></th>\n",
                        "      <th>abil</th>\n",
                        "      <th>abl</th>\n",
                        "      <th>abl buy</th>\n",
                        "      <th>abl eat</th>\n",
                        "      <th>abl find</th>\n",
                        "      <th>abl get</th>\n",
                        "      <th>abl make</th>\n",
                        "      <th>abl use</th>\n",
                        "      <th>absolut</th>\n",
                        "      <th>absolut best</th>\n",
                        "      <th>...</th>\n",
                        "      <th>zealand</th>\n",
                        "      <th>zero</th>\n",
                        "      <th>zero calori</th>\n",
                        "      <th>zing</th>\n",
                        "      <th>zip</th>\n",
                        "      <th>zip lock</th>\n",
                        "      <th>zipfizz</th>\n",
                        "      <th>ziploc</th>\n",
                        "      <th>ziwipeak</th>\n",
                        "      <th>zuke</th>\n",
                        "    </tr>\n",
                        "  </thead>\n",
                        "  <tbody>\n",
                        "    <tr>\n",
                        "      <td>38826</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.000000</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.000000</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>...</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "    </tr>\n",
                        "    <tr>\n",
                        "      <td>29932</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.000000</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.000000</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>...</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "    </tr>\n",
                        "    <tr>\n",
                        "      <td>3846</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.000000</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.000000</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>...</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "    </tr>\n",
                        "    <tr>\n",
                        "      <td>36530</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.000000</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.000000</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>...</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "    </tr>\n",
                        "    <tr>\n",
                        "      <td>11107</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.000000</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.000000</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>...</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "    </tr>\n",
                        "    <tr>\n",
                        "      <td>...</td>\n",
                        "      <td>...</td>\n",
                        "      <td>...</td>\n",
                        "      <td>...</td>\n",
                        "      <td>...</td>\n",
                        "      <td>...</td>\n",
                        "      <td>...</td>\n",
                        "      <td>...</td>\n",
                        "      <td>...</td>\n",
                        "      <td>...</td>\n",
                        "      <td>...</td>\n",
                        "      <td>...</td>\n",
                        "      <td>...</td>\n",
                        "      <td>...</td>\n",
                        "      <td>...</td>\n",
                        "      <td>...</td>\n",
                        "      <td>...</td>\n",
                        "      <td>...</td>\n",
                        "      <td>...</td>\n",
                        "      <td>...</td>\n",
                        "      <td>...</td>\n",
                        "      <td>...</td>\n",
                        "    </tr>\n",
                        "    <tr>\n",
                        "      <td>14485</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.000000</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.000000</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>...</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "    </tr>\n",
                        "    <tr>\n",
                        "      <td>28663</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.000000</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.000000</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>...</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "    </tr>\n",
                        "    <tr>\n",
                        "      <td>7440</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.000000</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.000000</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>...</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "    </tr>\n",
                        "    <tr>\n",
                        "      <td>15015</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.212604</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.298524</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>...</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "    </tr>\n",
                        "    <tr>\n",
                        "      <td>4631</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.000000</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.000000</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>...</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "      <td>0.0</td>\n",
                        "    </tr>\n",
                        "  </tbody>\n",
                        "</table>\n",
                        "<p>28089 rows × 6000 columns</p>\n",
                        "</div>"
                    ],
                    "text/plain": [
                        "       abil       abl  abl buy  abl eat  abl find  abl get  abl make  abl use  \\\n",
                        "38826   0.0  0.000000      0.0      0.0  0.000000      0.0       0.0      0.0   \n",
                        "29932   0.0  0.000000      0.0      0.0  0.000000      0.0       0.0      0.0   \n",
                        "3846    0.0  0.000000      0.0      0.0  0.000000      0.0       0.0      0.0   \n",
                        "36530   0.0  0.000000      0.0      0.0  0.000000      0.0       0.0      0.0   \n",
                        "11107   0.0  0.000000      0.0      0.0  0.000000      0.0       0.0      0.0   \n",
                        "...     ...       ...      ...      ...       ...      ...       ...      ...   \n",
                        "14485   0.0  0.000000      0.0      0.0  0.000000      0.0       0.0      0.0   \n",
                        "28663   0.0  0.000000      0.0      0.0  0.000000      0.0       0.0      0.0   \n",
                        "7440    0.0  0.000000      0.0      0.0  0.000000      0.0       0.0      0.0   \n",
                        "15015   0.0  0.212604      0.0      0.0  0.298524      0.0       0.0      0.0   \n",
                        "4631    0.0  0.000000      0.0      0.0  0.000000      0.0       0.0      0.0   \n",
                        "\n",
                        "       absolut  absolut best  ...  zealand  zero  zero calori  zing  zip  \\\n",
                        "38826      0.0           0.0  ...      0.0   0.0          0.0   0.0  0.0   \n",
                        "29932      0.0           0.0  ...      0.0   0.0          0.0   0.0  0.0   \n",
                        "3846       0.0           0.0  ...      0.0   0.0          0.0   0.0  0.0   \n",
                        "36530      0.0           0.0  ...      0.0   0.0          0.0   0.0  0.0   \n",
                        "11107      0.0           0.0  ...      0.0   0.0          0.0   0.0  0.0   \n",
                        "...        ...           ...  ...      ...   ...          ...   ...  ...   \n",
                        "14485      0.0           0.0  ...      0.0   0.0          0.0   0.0  0.0   \n",
                        "28663      0.0           0.0  ...      0.0   0.0          0.0   0.0  0.0   \n",
                        "7440       0.0           0.0  ...      0.0   0.0          0.0   0.0  0.0   \n",
                        "15015      0.0           0.0  ...      0.0   0.0          0.0   0.0  0.0   \n",
                        "4631       0.0           0.0  ...      0.0   0.0          0.0   0.0  0.0   \n",
                        "\n",
                        "       zip lock  zipfizz  ziploc  ziwipeak  zuke  \n",
                        "38826       0.0      0.0     0.0       0.0   0.0  \n",
                        "29932       0.0      0.0     0.0       0.0   0.0  \n",
                        "3846        0.0      0.0     0.0       0.0   0.0  \n",
                        "36530       0.0      0.0     0.0       0.0   0.0  \n",
                        "11107       0.0      0.0     0.0       0.0   0.0  \n",
                        "...         ...      ...     ...       ...   ...  \n",
                        "14485       0.0      0.0     0.0       0.0   0.0  \n",
                        "28663       0.0      0.0     0.0       0.0   0.0  \n",
                        "7440        0.0      0.0     0.0       0.0   0.0  \n",
                        "15015       0.0      0.0     0.0       0.0   0.0  \n",
                        "4631        0.0      0.0     0.0       0.0   0.0  \n",
                        "\n",
                        "[28089 rows x 6000 columns]"
                    ]
                },
                "execution_count": 20,
                "metadata": {},
                "output_type": "execute_result"
            }],
            "source": [
                "tfidf_df=pd.DataFrame(reviews_train_tfidf.toarray(),columns=tfidf_model.get_feature_names(),index=reviews_train.index)\n",
                "tfidf_df"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 83,
            "metadata": {},
            "outputs": [],
            "source": [
                "# Lets checkout the top features\n",
                "top_features=sorted(zip(tfidf_model.idf_,tfidf_model.get_feature_names()))\n",
                "top10=top_features[:10]\n"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 84,
            "metadata": {},
            "outputs": [{
                "data": {
                    "image/png": "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\n",
                    "text/plain": [
                        "<Figure size 720x576 with 1 Axes>"
                    ]
                },
                "metadata": {
                    "needs_background": "light"
                },
                "output_type": "display_data"
            }],
            "source": [
                "from wordcloud import WordCloud\n",
                "plt.figure(figsize=(10,8))\n",
                "wc = WordCloud(background_color=\"black\",max_font_size=150, random_state=42)\n",
                "wc.generate(str(top10))\n",
                "plt.imshow(wc, interpolation='bilinear')\n",
                "plt.suptitle('Top 10 words', size=30, y=0.88,color=\"r\"); \n",
                "plt.axis(\"off\")\n",
                "plt.savefig(\"top10_words.png\")\n",
                "plt.show()"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "# 4. Modeling"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## 4.1. Logistic regression"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 73,
            "metadata": {},
            "outputs": [{
                "data": {
                    "text/plain": [
                        "0.8208271831913998"
                    ]
                },
                "execution_count": 73,
                "metadata": {},
                "output_type": "execute_result"
            }],
            "source": [
                "# Logistic Regression with default parameters\n",
                "lr=LogisticRegression(max_iter=1000)\n",
                "lr.fit(reviews_train_tfidf,sentiment_train)\n",
                "lr_predict=lr.predict(reviews_test_tfidf)\n",
                "plain_lr_f1=f1_score(sentiment_test,lr_predict,average=\"weighted\")\n",
                "plain_lr_f1"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 74,
            "metadata": {},
            "outputs": [{
                "data": {
                    "image/png": "\n",
                    "text/plain": [
                        "<Figure size 432x288 with 2 Axes>"
                    ]
                },
                "metadata": {
                    "needs_background": "light"
                },
                "output_type": "display_data"
            }],
            "source": [
                "plot_confusion_matrix(sentiment_test,lr_predict,normalize=True)\n",
                "plt.title(\"Linear Regression with defult params\")\n",
                "plt.show()"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 72,
            "metadata": {},
            "outputs": [{
                "data": {
                    "text/plain": [
                        "2    21680\n",
                        "1    21680\n",
                        "0    21680\n",
                        "Name: sentiment, dtype: int64"
                    ]
                },
                "execution_count": 72,
                "metadata": {},
                "output_type": "execute_result"
            }],
            "source": [
                "from imblearn.over_sampling import SMOTE\n",
                "# Resample the minority class. You can change the strategy to 'auto' if you are not sure.\n",
                "sm = SMOTE(sampling_strategy='auto', random_state=7)\n",
                "\n",
                "oversampled_trainX, oversampled_trainY = sm.fit_resample(reviews_train_tfidf,sentiment_train)\n",
                "oversampled_trainY.value_counts()"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 33,
            "metadata": {},
            "outputs": [{
                "data": {
                    "text/plain": [
                        "{'penalty': 'l1', 'C': 100}"
                    ]
                },
                "execution_count": 33,
                "metadata": {},
                "output_type": "execute_result"
            }],
            "source": [
                "# we will tune the parameters of Logistic Regression with RandomizedsearchCV\n",
                "lr_params={\"penalty\":[\"l1\",\"l2\"],\n",
                "           \"C\":[10**i for i in range(-4,4)]}\n",
                "lr=LogisticRegression( max_iter=1000,solver=\"liblinear\")\n",
                "lr_rnm_clf=RandomizedSearchCV(lr,lr_params)\n",
                "lr_rnm_clf.fit(oversampled_trainX,oversampled_trainY)\n",
                "lr_rnm_clf.best_params_"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 34,
            "metadata": {},
            "outputs": [{
                "data": {
                    "text/plain": [
                        "0.778085964719897"
                    ]
                },
                "execution_count": 34,
                "metadata": {},
                "output_type": "execute_result"
            }],
            "source": [
                "lr_bal=LogisticRegression(**lr_rnm_clf.best_params_, max_iter=1000,solver=\"liblinear\")\n",
                "lr_bal.fit(oversampled_trainX,oversampled_trainY)\n",
                "lr_bal_predict=lr_bal.predict(reviews_test_tfidf)\n",
                "lr_bal_f1=f1_score(lr_bal_predict,sentiment_test,average=\"weighted\")\n",
                "lr_bal_f1"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 35,
            "metadata": {},
            "outputs": [{
                    "data": {
                        "text/plain": [
                            "Text(0.5, 1.0, 'Logistic regression Confusion matrix')"
                        ]
                    },
                    "execution_count": 35,
                    "metadata": {},
                    "output_type": "execute_result"
                },
                {
                    "data": {
                        "image/png": "\n",
                        "text/plain": [
                            "<Figure size 432x288 with 2 Axes>"
                        ]
                    },
                    "metadata": {
                        "needs_background": "light"
                    },
                    "output_type": "display_data"
                }
            ],
            "source": [
                "plot_confusion_matrix(sentiment_test,lr_bal_predict,normalize=True)\n",
                "plt.title(\"Logistic regression Confusion matrix\",size=15)"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## 4.2. Support Vector Classifier"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 37,
            "metadata": {},
            "outputs": [{
                "name": "stderr",
                "output_type": "stream",
                "text": [
                    "C:\\Users\\shari\\Anaconda3\\lib\\site-packages\\sklearn\\svm\\_base.py:977: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
                    "  \"the number of iterations.\", ConvergenceWarning)\n"
                ]
            }],
            "source": [
                "from sklearn.svm import LinearSVC\n",
                "svc_params={'penalty':['l1','l2'],\n",
                "        'C':[10**i for i in range(-4,4)]}\n",
                "svc_model=LinearSVC(dual=False,max_iter=5000)\n",
                "rndm_clf=RandomizedSearchCV(svc_model,svc_params)\n",
                "rndm_clf.fit(oversampled_trainX,oversampled_trainY)\n",
                "svc_best_params=rndm_clf.best_estimator_"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 38,
            "metadata": {},
            "outputs": [{
                "data": {
                    "text/plain": [
                        "LinearSVC(C=1000, dual=False, max_iter=5000)"
                    ]
                },
                "execution_count": 38,
                "metadata": {},
                "output_type": "execute_result"
            }],
            "source": [
                "svc_best_params"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 44,
            "metadata": {},
            "outputs": [{
                "data": {
                    "text/plain": [
                        "0.7876815394459185"
                    ]
                },
                "execution_count": 44,
                "metadata": {},
                "output_type": "execute_result"
            }],
            "source": [
                "svc_model=LinearSVC(C=1000, dual=False, max_iter=5000)\n",
                "svc_model.fit(oversampled_trainX,oversampled_trainY)\n",
                "svc_predict=svc_model.predict(reviews_test_tfidf)\n",
                "svc_f1=f1_score(sentiment_test,svc_predict,average=\"weighted\")\n",
                "svc_f1"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 75,
            "metadata": {},
            "outputs": [{
                "data": {
                    "image/png": "\n",
                    "text/plain": [
                        "<Figure size 432x288 with 2 Axes>"
                    ]
                },
                "metadata": {
                    "needs_background": "light"
                },
                "output_type": "display_data"
            }],
            "source": [
                "plot_confusion_matrix(sentiment_test,svc_predict,normalize=True)\n",
                "plt.title(\"SVC Confuison matrix\",size=18)\n",
                "plt.show()"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## 4.3. Decision Trees"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 46,
            "metadata": {},
            "outputs": [],
            "source": [
                "from sklearn.tree import DecisionTreeClassifier\n",
                "dt_param={'max_depth':[i for i in range(5,2000,3)],\n",
                "         'min_samples_split':[i for i in range(5,2000,3)]}\n",
                "dt_clf=DecisionTreeClassifier()\n",
                "rndm_clf=RandomizedSearchCV(dt_clf,dt_param)\n",
                "rndm_clf.fit(oversampled_trainX,oversampled_trainY)\n",
                "dt_best_params=rndm_clf.best_params_"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 47,
            "metadata": {},
            "outputs": [{
                "data": {
                    "text/plain": [
                        "0.7876815394459185"
                    ]
                },
                "execution_count": 47,
                "metadata": {},
                "output_type": "execute_result"
            }],
            "source": [
                "dt_clf=DecisionTreeClassifier(**dt_best_params)\n",
                "dt_clf.fit(oversampled_trainX,oversampled_trainY)\n",
                "dt_predict=dt_clf.predict(reviews_test_tfidf)\n",
                "dt_f1=f1_score(sentiment_test,svc_predict,average=\"weighted\")\n",
                "dt_f1"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 48,
            "metadata": {},
            "outputs": [{
                    "data": {
                        "text/plain": [
                            "Text(0.5, 1.0, 'Decision Tree Confuison matrix')"
                        ]
                    },
                    "execution_count": 48,
                    "metadata": {},
                    "output_type": "execute_result"
                },
                {
                    "data": {
                        "image/png": "iVBORw0KGgoAAAANSUhEUgAAATkAAAEaCAYAAABq2SBpAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjEsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+j8jraAAAgAElEQVR4nO3deXwTdfrA8c/TlvtGzpZbuW8s4IGIAsqloHig/LxdRVdddT1Yd1fRVVdFPFER7xtBEAFRVBTBay2XyCGKiNIW5BaQo214fn/MtKRp2iRNmqThefPKi2Tyne88mU6efGe+M98RVcUYYxJVUqwDMMaYsmRJzhiT0CzJGWMSmiU5Y0xCsyRnjEloluSMMQmtXCU5EblURFRE+pVi3g0isiDyUZloEJF6IvKqiGS728CCUtQxzp23RcQDPIKJyAIR2RDrOIoTMMmJSD93w8h/eERkp4isFJFXRGSQiEg0gi2vvJJzMI8FsY7XmzjOFpHZIrJJRHJEZJeIfCUi/xCRulEKZQJwPjAJuAi4L0rLPSKISDf3R6BFrGOJNAl0MrDbavoMeAuYCwhQA2gLjACaAZ8A56rqrjINViQZqADkqOqhEOetBKiq5pRJcCUvuxVwgs/kfwLtcL6w3n5X1Y+jElgAIlIVeBsYBqwG3gF+BaoDxwFnAd+raq8oxJINLFbVM8OoIwVIAQ6qnQVfiIhcCrwEnKKqC0KctyJOLjlYBqGFLSWEsktV9XXvCSJyM/AQcDNOEhwcwdiKUFUP4CnlvDH7A6jqemC99zQRuRJo57tOfbmt5GqqurcMQyzOJJwE9zBwu88PyxMi0hi4PkqxNAJ2hFOBquYBeZEJ58jmNjgqqeq+WDQcQqKqJT6AfoACt5RQZpFbpo/P9FrAg8A64CCwFScZtvJTR0XgNmA5sA/4A1gMXOdV5lJ3Of28plUGxgFr3fl2Ad8D433q3wAs8LPcEcCXwF738SUw3E+5DcACnNbX+8AeN8Z3gEaB1qOf+hY4q9/vur4U+CtO6+kgMM6rzPnAF+7y9wH/A84pZhkDgI/cdXIAWAGMCTK+Lm4sX+O2+EOY711gu7vM1e7fNdmn3Mtu/bWAZ4Atbvkvgd5e5ca55XwflwIt3Ofj/MSRP1+LANPqAo8CP7vL3w4sAW71qS8FuN39PPnl3gU6+5QriAnnByLDLb8JGA+kBLke1V1Hp7p/g31AJs6PDUAd4AV3ve0D5gCpPnWk4uzmLwd2ev09bvf+e5Swjl/2+d4NAP7trqtc4FKvbXmDV33d3WV97L3tAMnAQjfejqF+Z0r7CKUlV5IXgD7AUJwvICJSC/gKZ3f2RWAV0Bi4FvifiKSr6q9u2YrAPJwv+UfA6+5K6gycDUwsYdlPAZcDr+JsrMlAa5yNo0Qicq07/w/AvRz+8swUkatVdbLPLGk4f9B3gVuBrsDVQE3gtEDLC8GNwFHAc8BmYKMb7704u7kf4mxsh3B2GaeJyHWq+pTXZ7sKpyX2Dc7xqz+BgcAzInK0qt4aIIaR7v/PqbuFBiIi6cDnOF+Ap9zYz8D5oesKjPYz2zycH7973M98MzBXRFqo6h5gBs6P5Gs4P6b5f5OvgokpCNOAvsCzwHdAVZwfsn44SSnfG8B5OF/cZ3Baln8FvhaRk1R1mU+9Q3C29Uk42/9w4BacZHN/kLF1x1l/k3G27/OAB0TkAHAJzg/vOOAY4Aa3zACv+bvgfH/exUlMFXD2th4AWuFsu+Cs48bAVW5sa9zpP/vE87Bbx3PAbpyGRRGqukxEbgMeB8YC/3Xfugs4CeeHdlWQ6yB8Qfyi9CNwS66HW2a617THgf1AV5+yzXFW0Mte025z57/fT91JXs8vpWhLbgcwN4jPsQGvlhzOL+FenC9QTa/pNXH+uHuA2j7zK3CeT71PudPbhfLrQsktuR1Ag2LWsb91NNNdpzXc141xfiTe9FP2cZxd/qMDxDfdXV6PED7Tlzi7g128pgkw1a2rv9f0l91pT/vUca47/Wqf6QUtC69pLQijJYfTiiwSg5+6Brrl3qZwy6SL+3kX+YnpT59lC7AS2BTkulScHzHvVm1FnBbhIeAJn/KPuPO09ZpWBT+tcJwfDA/QuKTvlp/31gJVi9mWN/iZ/h7OD97xwMnuMt8J5XsSiUekTiHZ7f5fEwqOI43GaZpmud3/9USknvvH/4bCLZ/ROL9w9/hWrIE7GP4AOopIpxBjHghUw9lY8uPHff4kzsH1AT7zZKvqVJ9pn7r/HxPi8kvyqqpu8Zk2GmdDe8V7fbrrdBZOZ9DxbtlzgErAC37KzsbpVe8fIIaa7v+7SyzlEpEGOJ0rs1R1Rf50dbb2/JbLWX5mfdTndf76bB3McsO0H+dwQO8AvYr5cd/nfh4A3M85B+gjIvV95pmpqhu8yipOB14jEakeZHxfq+r/vOrIAb7FSZhP+JRd5P7f2qv8/vx4RaSiiNR1t4F5ONtAepBx5HtGVfeFUP4ynNb8mzgt4Y3AlSEuM2yR2l31/ULUx9n1OA1nV8Qf7+TVGliuqgdKsewbcX6ZvheR9Tgb0mxgdoAE2dL931+zeaX7fyuf6et9C+IcmwHn80bKj36mtcfZuH8oYb6GXmXB6fUOVLY4+X/LGgHK5Stpfa7G+Xv7rk/wWaequt09IymS69MvVc0RkRtxWre/iMhqnCQ7U1XnexVtiRP/Gj/VrMTZFW1J4W090LYSTEeSvzp2uv//Usz0gvXm9iaPBS7G+RH2PdWrThAxePO3XRZLVXeIyGU4u/jgHLMv0zMw/IlUkuvi/p+/j56/Mj/BOR4TjKCO+xSZSfU991d4CE6TeABwBbBIRAZo8T0/pTm3r6Se3UieK+jv11Jw1tHgEuJY5VUWnI17UzFl/X2BvK3EOZ7THfA93uRPqT6/Oj3mpa2vpG0mqG1bVSeJyHs4x5NPxmkFXycib6vqqBBi8RWJbaXYOoJcb4/g9H6/jXNcdgvO7mMPnO9lqHtyobTi8nmf8tMN55BGVEUqyV3h/v+++/9WnB69mqpaUmsi349AexGppKU41UNVd+B0Vrzu7io/gHOcbzjOgWV/8g+qdgTm+7zXwf0/UCKIpp+AQcBvquqvReFbFmBbkOvfn+nAncAVIvKS925aMfLXVUc/77XD+UJFen3mn1Li74Rkf61Gv1R1E/A88Lx7asRrwAUiMkFVM3C2ldNxWsgrfGbP31Z8W1bx4CJgoVeyBkBE/B1aKVUjoyQicgZOkn0JpyX5sIgsVNXvI72skoR1TE5EkkXkYZye1bmq+iUUHEd7A+glIucUM28Dr5dv4DSd/+WnXLG/eu7ya3tPc7+M+S2Pks7G/xjn+OD1IlKwS+Y+vx5ndyIuTsp1veb+f7/7RSzEZ31OxTnWdLeIVPFTtpZ7cnSx3ONNr+EcZ/uvv7+DiDQSkfvd8ltwejzP8D4+6s73D/fluyUtM1Tq9L5uBk71js89+XpEoPlFpKp7wrN3nR4OJ7L87Wem+/8/fJbTCael8oWqFndYJpY8+LQaRaQacJOfsvm7zxG5gkVE0nCS2xrgOpxjyvuAKf62ybIUSkuuh4j8n/vc+4qH5jinfVzoU/6fwInAVBGZitPZkOOWH4JzLtKlbtnHcbrK/yUiPd36DuC0CtpStAMgXw1gk4jMwklsW3COjVyDc4xidnEfRlV3ud3cT+Gc0vKy+9alOL86V6vqH8WujShT1QwRuQu4G1guItOAbJye1GNx1mlFt2ymiFyD0zpZIyKv4VypUB/ntJwROC2QDQEWOwbnx+d2YKiITOfwFQ+9cHZnvX+V/4ZzCskiEck/hWQYTivoTZ/jXJEyEef0nw9EZCbOuWFjcHa3ewaYtw3wuYi865bfidNauwanZbYIQFU/drfhUUAdEZnD4VNIDuCcvhGP3gGuFpG3cQ4dNcQ53Wq7n7IZOMcd/ykidXAaAL94d3wES0SScBou1YBRbmfFPhG5AueH7jEOn75S9oLoyu5H4RMEPTg9mquAV4BBJcxbFed8ru9xerL24GT25/DqGnfLVsZJjKtwNpxdOCv+2uK6uXG+1P/F6XHajtN62YBzXlJrn/o34P9k4LNwWiB/uo+vgBF+yhU3f/76uTSUbm0CnAxcwnxDcXrHdrifdyPwAXCNn7In4mxUW3B+YLJxOmb+DlQOMk7BOWduDk7SynX/Nl/iJL/aPuW74rR88uNbQwknAxezTH+nixSZ5k5PwbnqZpO73SzF+cEcR+BTSI7C6d1d7n6m/TinFD2G1+kVXsu53f08B93PN5MSTgb2E2uRmEpY78V9Xr/rzd+2g/P9G4/zw3QA5zDGWJye9SLbGc65d6vdbaVg+ZRweonXtrzB6/Wdbnl/22T+KVcjQ/m+hPMIeO2qMcaUZ+VqqCVjjAmVJTljTEKzJGeMSWiW5IwxCS1SJwOXico16mj1+qmxDiNuVatU5HQ546N25QqxDiGubfztV3Zs3xbW1TrJNZur5u0Pqqzu3zpPVQeFs7xQxXWSq14/lTPueyvWYcSt3i1qBi50hBvRwX4kS3J6v+MDFwpA8/ZTqe15QZU9sPypemEvMERxneSMMeWBgMTvkS9LcsaY8AiQFL+HTizJGWPCF8c37LMkZ4wJk+2uGmMSnbXkjDEJS7CWnDEmkYm15IwxCc56V40xics6HowxiUyw3VVjTIKzlpwxJnHZ7qoxJpEJkGwdD8aYRGbH5Iwxict2V40xiS6OW3Lxm36NMeWHJAX3CFSNyCARWSsi60RkrJ/3bxWR5e5jpYh4RKRuSXVakjPGhEck+EeJ1Ugyzs2nBwMdgAtEpIN3GVUdr6rdVLUb8A/gc1XdUVK9trtqjAlfZC7r6gWsU9X1ACIyBRgOrC6m/AVAwPsjWEvOGBMmCWV3tZ6ILPZ6XOVVURqw0et1pjut6BJFqgKDgOmBorOWnDEmfMF3PGxT1fTiavEzTYspewbwZaBdVbAkZ4wJV+TGk8sEmnq9bgJkF1N2FEHsqoLtrhpjwhbS7mpJMoDWItJSRCriJLJZRZYmUgs4GXgvmOisJWeMCV8EOh5UNU9ErgPmAcnAi6q6SkTGuO9PcoueBXykqn8GU68lOWNM+CJ0MrCqzgXm+kyb5PP6ZeDlYOu0JGeMCY/YZV3GmEQXx5d1WZIzxoRNLMkZYxKVM/q5JTljTKISQZLiN8nF79HCKOrUuDr3D23LA8PaMqR9/WLLtaxbhRfO70x601oF06pUSOLaE5tx/9A23DekDUcfVTUaIUfdqm8+565Rp3Lnuf2Y9+ozRd7/buFH3HvRIO67ZAj/vfxM1n2XAcDmX3/mvkuGFDxuGtCZ+W+/GO3wy9ynn8yjT3onju/enicfHV/k/Z9+/IFhA/vSvEENnnnykYLp635ay4A+PQserZvWY/LTT0Qz9IgQkaAesRDVlpyIDAIexzkH5nlVfSCay/dHBC46No2HP/uFHftzufO0Y1ietZvs3QeLlDu3W2NWbt5TaProY1NZuWkvT3/5G8lJQsXk+P1FK61DHg9THr6TGx5/jToNGvHAFcPpctIAGrdsXVCmbfqJdDlpICJC5ro1PP+v6xg3ZT6Nmh/NP1+ZW1DPP4YfR7e+p8Xqo5QJj8fDHbf8jbdnzqVxahMGn3ICpw0eRtt27QvK1KlTl3sffIQP3i98busxrdvyyRcZBfV0b9+SwcOGRzX+SIjn3dWoteSCGUYlFlrVrcqWvTls/TMHzyHl29920b1JzSLlBrSpx+KNf7D7QF7BtMopSbSpX52F653L5zyHlP25h6IWe7RsWP0d9Zs0p35aM1IqVCR9wBl8t+jjQmUqV61WsKHn7N/vd6P/YfGX1EtrzlGNm0Ql7mhZtiSDFq2OpnmLVlSsWJHhI89j3tzZhcrUq9+Abj3SqZBSodh6Fn3+KS1atqJps+ZlHXLExXNLLpq7qwXDqKhqDpA/jEpM1alagR37cgte79iXS50qhTfE2lVS6NGkJp+t215oev3qFdlzMI8rejdh3KDWXNarSUK25HZt3Uydho0LXtep34hdWzcXKbf883mMG9Wfp265nIvueKjI+4s/mUPPgWeUaayxsHlTNmlphy+5bJyaxuZNWSHX8970aYwYeV4kQ4sOCeERA9FMckEPoxJrvsMeXNgjlWnLN6M+byQnCc3rVOGzddsZ9+FPHMw7xNAODaIWZ7Son4Eg/P0qdzv5dMZNmc+YB55l1nOPFHovLzeHFV98Qo9Th5RZnLGivhsGICF+o3Nycpj3wRzOGDEyUmFFjRBcK+5IOCYX1DAq7vhSVwFUq9e4yAyRtnNfLnWrHm651a1agV37cwuVaVG3Ktec0AyA6pWS6ZJaE88h5eft+9i5L5f12/cDkLFxF0PbJ16Sq1O/MTt/31TweufWzdSq17DY8q2792bbvbewd9cOqtd2RqZe9fUCmrXpSM26xXfslFeNU9PIyjr8+70pO4uGjVNDquPTjz+kc9du1G9Q/HqNZ0lJ8duHGc3IghpGRVUnq2q6qqZXrlGnzIP6Zcc+GtSoSL1qFUhOEno1q82yzN2Fytw2+wdudR+LN/7Ba4uzWJa1m90H8tixL5dGNSoB0KFhjSIdFomgefsubMncwLbsjeTl5rD4k9l06TOgUJktmRsKWjS/rV1JXm4u1Wod/vtlfDyb9IFnRjXuaOnWI51ffl7Hbxt+IScnh/emT+X0wcNCqmPm9KmcNfL8Moqw7FlLzlEwjAqQhTOMyoVRXL5fhxTeWJzN3/u1Iklg0fqdZO8+SL9jnBbIgnUlj8n3+pIsrjq+KSnJwta9ObzwTWY0wo6q5JQURt18N0/edDGHPIc4Ydi5pLZqw8J33wCg71mjWfbZh/zvwxkkp6RQoWJlrvzPk4c7Ig7s54eMLxh9+32x/BhlJiUlhfvHP8YFI4fh8XgY9X+X0rZ9B155cTIAl1x+FVt+38ygU05gz57dJEkSzz0zkc+/WU6NmjXZt28fCz+bz0OPPhXjT1JKMTzeFgzxdzyhzBYmMgR4jMPDqJS41ddr1VHPuC+ocfGOSL1bFO0FNoWN6BDabuOR5vR+x/PdsiVhpaiUeq209rD7gyq7/ZULlpQwMnCZiOp5cv6GUTHGlG/5HQ/xyi7rMsaELZ4v67IkZ4wJj8T3FQ+W5IwxYbMkZ4xJaJbkjDEJyzoejDGJL35znCU5Y0yYJL4v67IkZ4wJm+2uGmMSW/zmOEtyxpjwxXNLLn53pI0x5UKwI5AEkwhFZJCIrBWRdSIytpgy/URkuYisEpHPA9VpLTljTNgi0ZLzukXCQJyh2TJEZJaqrvYqUxt4Ghikqr+JSMABHK0lZ4wJmyRJUI8AgrlFwoXADFX9DUBVtwSq1JKcMSZsIeyu1hORxV6Pq7yqCeYWCW2AOiKyQESWiMjFgWKz3VVjTHhCu0B/WwnjyQVzi4QU4FigP1AF+FpEvlHVH4tboCU5Y0xYBOe+xBEQzC0SMnES5Z/AnyKyEOgKFJvkbHfVGBOmiPWuFtwiQUQq4twiYZZPmfeAk0QkRUSqAr2BNSVVai05Y0zYkiIwaKaq5onIdcA8Dt8iYZWIjHHfn6Sqa0TkQ2AFcAh4XlVXllSvJTljTHgkYrurfm+RoKqTfF6PB8YHW6clOWNMWITItOTKiiU5Y0zY4viqLktyxpjwxfO1q5bkjDHhieAxubJgSc4YExZBbNBMY0xis5acMSah2TE5Y0zismNyxphE5ly7Gr9ZzpKcMSZscZzjLMkZY8JnVzwYYxJXaOPJRV1cJ7lmdarw5NmdYh1G3Kp/3A2xDiHuXZoxMdYhxLWUCLTAIjieXJmI6yRnjCkPgrsTV6xYkjPGhC2Oc5wlOWNMmMQ6HowxCczOkzPGJDxLcsaYhBbHOc6SnDEmfNaSM8YkLrtA3xiTyJxBM+M3y1mSM8aELSmOm3KW5IwxYYvjHGdJzhgTHonzC/Tj9+4TxphyI0mCewQiIoNEZK2IrBORsX7e7ycif4jIcvdxZ6A6g27JiciTgBb3vqrakBjGHKEi0fEgIsnAU8BAIBPIEJFZqrrap+giVR0WbL2h7K4uDqGsMeYIITg9rBHQC1inqusBRGQKMBzwTXIhCTrJqeor3q9FpJqq/hnOwo0xiSGEhlw9EfFuME1W1cnu8zRgo9d7mUBvP3UcLyLfAdnALaq6qqQFhtzxICLHAy8A1YFmItIVuFpVrw21LmNMApCQxpPbpqrpxdXkZ5rvIbKlQHNV3SsiQ4CZQOuSFliajofHgNOB7QCq+h3QtxT1GGMShEhwjwAygaZer5vgtNYKqOpuVd3rPp8LVBCReiVVWqreVVXd6DPJU5p6jDHln+CcDBzMI4AMoLWItBSRisAoYFahZYk0ErfZKCK9cHLY9pIqLc15chtF5ARA3UBuANaUoh5jTIKIRO+qquaJyHXAPCAZeFFVV4nIGPf9ScA5wDUikgfsB0aparFnfUDpktwY4HGcg4RZbkB/LUU9xpgEEOSuaFDcXdC5PtMmeT2fCIR0d6KQk5yqbgNGhzqfMSZxxfO1qyEfkxORViIyW0S2isgWEXlPRFqVRXDGmPJBgnzEQmk6Ht4EpgKNgVRgGvBWJIMyxpQv4p5GEugRC6VJcqKqr6lqnvt4nRIu9zLGJDandzUy166WhVCuXa3rPv3MvXB2Ck5yOx94vwxiM8aUB5I4g2YuwUlq+Z/maq/3FPhPpIIyxpQv8TzUUijXrrYsy0CMMeVT/u5qvCrVoJki0gnoAFTOn6aqr0YqKGNM+ZIQLbl8InIX0A8nyc0FBgNfAJbkjDlCxW+KK13v6jlAf2Czql4GdAUqRTQqY0y5IQLJSRLUIxZKk+T2q+ohIE9EagJbgHJ9MvDHH31I987t6dqhDRPGP1jk/bVrf+DUk0/kqJpVePzRCQXTDxw4QL8+x3F8z+707N6Z++4ZF8Woo2vgCe357t1/s/K9u7jlsoFF3r/p4v58M2Us30wZy+Jpd7B38RPUqVkVgFrVq/Dm+CtYPuNfLJv+L3p3SbzDux/N+5AuHdvSsd0xjH/ogSLvr/3hB07uczy1qlXi0UceLpi+ceNGTh9wCt06t6dH145MfOLxaIYdMfF8nlxpjsktFpHawHM4Pa57gW8DzSQiLwLDgC2q2qkUyy0THo+Hv//tet57fx5pTZpw8om9GTrsDNq171BQpm6duoyf8BhzZr1XaN5KlSox58NPqF69Orm5uZx2al8Gnj6IXr2Pi/bHKFNJScJjY89j6DUTyfp9F1+8cStzPv+eH9ZvLijz6KvzefTV+QAM6duJ60efws7d+wB4+LZz+Oir1Vx46wtUSEmmauWKMfkcZcXj8XDjDX/l/Q8+Jq1JE/oc15Nhw86kfYfD21CdunWZ8OgTzJ41s9C8KSkpPPDQBLr36MGePXs4ofex9B8wsNC85UEcH5ILvSWnqteq6i73otmBwCXubmsgLwODQl1eWVuc8S2tjj6alq1aUbFiRUaeez5zZhca3YX6DRpwbHpPKlSoUGi6iFC9enUAcnNzyc3NjesDsKXVs1MLft64jQ1Z28nN8zBt3lKG9etSbPnzBqUz9cMlANSoVpk+PY7m5Xe/BiA3z8Mfe/dHJe5oyfj2W44++piCbejc80cxZ3bhH8QGDRqQ3rPoNtS4cWO69+gBQI0aNWjXrj3Z2VlRiz0ShOCGWYrV9a1BJzkR6eH7AOoCKe7zEqnqQmBHGLGWiU3ZWaQ1OTxOX1paGptC2Mg8Hg8n9OpBq6aNOKX/AHr28jdac/mW2qAWmb/vLHid9ftO0urX8lu2SuUKDDyhPTPnLwegZdpRbNu5l8l3/x9fv3U7T995YcK15LKzs2hSaBtqQlZW6Inq1w0bWL58WfnbhoIcMDNWv/+h7K5OKOE9BU4NMxYAROQq4CqApk2bRaLKEvkbiiqU1lhycjJffbuUXbt2ceF5I1m9aiUdOsbN3nhE+LtJSXHX8Q3t25mvl68v2FVNSUmmW7um3PzgNDJW/srDt47klssHcs/TiXORTLjbEMDevXu54LyRjJ/wGDVr1oxUaFETz3swoZwMfEpZBuK1nMnAZIAex6aX+TWxqWlNyMo8PNBxVlYWjRqnhlxP7dq1OanvyXz80byES3JZW3bRpGGdgtdpDeuQvfUPv2XPPf1Yprm7quC0+rK27CJj5a8AvPvJcv7up+OiPEtLa0JmoW0ok9TU4Leh3NxcLjhvJOdfMJoRZ51dFiGWKQGS4zjJHfE3lz42vSc/r1vHhl9+IScnh+nT3mbosDOCmnfr1q3s2rULgP379/PZp/Np07ZtWYYbE4tX/coxzerTPPUoKqQkc+7pPXh/wYoi5WpWr0yfY49httd7v2/fQ+bmnbRu3gCAfr3aFuqwSATpPXuybt1PBdvQtLenMHTYmUHNq6qM+csVtG3Xnr/ddHMZR1p2EuIC/USVkpLCw489wYgzBnPI4+GiSy6jfYeOvPCcMxjpFX8Zw++bN9P3xF7s2b2bpKQknp74OBnLVvL75k1cfeVleDweDh06xNkjz2XwkKDveVtueDyHuOnBqcx++q8kJwmvvPcNa9Zv5spz+gDw/DtfAHDmKV2Z/80P7DuQU2j+mx+cxkv3X0rFlGQ2ZG3jqrtej/pnKEspKSk8+vhEzhh6Oh6Ph0suvZwOHTvy3LPONvSXq8ewefNmTjwuvWAbmvjEYyxbsZrvV6zgzTdeo1OnzvQ+thsAd997P4MGD4nlRwpZPF/WJQGGR4/cgkTewrlSoh7wO3CXqr5Q0jw9jk3XhV8FPDvliFX/uBtiHULc25kR0kjZR5wTe6ezZMnisFJUo9addPQj04Mq+8iZ7ZaUcEvCMlGay7oEZ/jzVqp6j4g0AxqpaonZSFUvKGWMxpg4F88tudIck3saOB7IT1p7gKciFpExptxJlFNI8vVW1R4isgxAVXe6tyY0xhyBBEiJ497V0iS5XBFJxj1VSkTqA4ciGpUxplyJ4xxXqiT3BPAu0EBE7sMZleRfEY3KGFNuSAwv2QpGae67+oaILMEZbkmAEaq6JuKRGWPKjTjOcaW672ozYB8wG5gF/OlOM8YcoSJ1MrCIDBKRtSKyzr1hVnHleuq3GAsAABGuSURBVIqIR0TOCVRnaXZX3+fwDW0qAy2BtUDHUtRljCnnBCIyIKZ7rP8pnNGNMoEMEZmlqqv9lHsQmBdMvaXZXe3ss8AeFL5zlzHmSBK5S7Z6AetUdT2AiEwBhgOrfcpdD0wHegZTadjXrqrq0mAXZoxJTBLkP6CeiCz2elzlVU0asNHrdaY77fByRNKAs4BJwcZWmisevK8iTgJ6AFtDrccYkxhCvCXhthIu6/JXi+91p48Bt6uqJ9jhnUpzTK6G1/M8nGN0wV24ZoxJSBHaXc0Emnq9bgJk+5RJB6a4Ca4eMERE8lR1JsUIKcm5B/yqq+qtocxnjElsERo0MwNoLSItgSxgFHChdwHvm9yLyMvAnJISHISQ5EQkRVXzghnq3Bhz5HBuSRh+PW5+uQ6n1zQZeFFVV4nIGPf9oI/DeQulJfctzvG35SIyC5gG/OkV4IzSBGCMKf8idcWDqs7FuWm99zS/yU1VLw2mztIck6sLbMe5p0P++XIKWJIz5ggUYsdD1IWS5Bq4PasrOZzc8kVn5E1jTFyK58u6QklyyUB1guvmNcYcMYQkv2khPoSS5Dap6j1lFokxplwSEqclF8cfwxgTMwIpcXxQLpQk17/MojDGlFsJ05JT1R1lGYgxpvxKqEEzjTHGVxznOEtyxpjwCBEYzqgMWZIzxoRHbHfVGJPAnCseLMkZYxJY/KY4S3LGmAiI44acJTljTLgkUuPJlQlLcsaYsFjvqjEm4VnHQynty/Gw4rc/Yh1G3LrojjGxDiHurdxo209J9ud4wq9EIjb8eZmI6yRnjIl/trtqjEl41pIzxiS0+E1xluSMMWESINlacsaYRBbHOc6SnDEmXILE8Q6rJTljTNjiuSUXzz2/xphywDmFRIJ6BKxLZJCIrBWRdSIy1s/7w0VkhYgsF5HFItInUJ3WkjPGhEci05ITkWTgKWAgkAlkiMgsVV3tVWw+MEtVVUS6AFOBdiXVa0nOGBO2CF3W1QtYp6rrAURkCjAcKEhyqrrXq3w1grjns+2uGmPC4gyaGdwjgDRgo9frTHda4eWJnCUiPwDvA5cHqtSSnDEmbBLkP6Ceeywt/3FVoWqKKtJSU9V3VbUdMAL4T6DYbHfVGBO2EPZWt6lqejHvZQJNvV43AbKLq0hVF4rI0SJST1W3FVfOWnLGmLCF0JIrSQbQWkRaikhFYBQwq9ByRI4R90JZEekBVAS2l1SpteSMMWHJPyYXLlXNE5HrgHlAMvCiqq4SkTHu+5OAkcDFIpIL7AfOV9USOx8syRljwiMSsUEzVXUuMNdn2iSv5w8CD4ZSpyU5Y0zY4viCB0tyxpjw2H1XjTEJL35TnCU5Y0wkxHGWsyRnjAmb7a4aYxJa/KY4S3LGmEiI4yxnSc4YExYBGxnYGJPAIjSeXFmxJGeMCVsc5zhLcsaYcIndXNoYk9jiOMdZkjPGhEew3VVjTKKL4yxnSc4YEzY7hSTOfbPwEx677w4OeTycce5FXHT1jYXenzdrGm889zgAVapW45ZxE2jdvhMAU156mtnTXkNEOLpNB+54YCKVKlWO+mcoax0bVuf87o1JEvhi/U4+XOt/tOnmdarwj/6tmPz1RpZm7Qbg/iFtOJh3iEOqeA7B/fN/jmboUfHV558w4Z6xHDrkYfh5F3PpNTcVev+DmVN59dnHAKhSrTpj/zOBNu07A7Bn9y7uHXsDP/+4BhHh3w9OpEuPXlH/DOGwY3KAiDQFXgUaAYeAyar6eLSWXxyPx8OEu2/jsZdm0KBRKleO7E+f/oNoeczhWzmmNmnGxNfnULNWbb7+/GMe+veNPPfOJ2zdnM07r03mjblfU6lyFf79t8v45P0ZDD37whh+osgT4MIeqTy68Bd27svjjgGt+C57D5v2HCxSbmSXhqzavLdIHRMW/MLeHE90Ao4yj8fDQ3fdwsRXZ9KwUSqXjDiFvgMG06q11zbUtDnPTplLzVq1+XLBx9x/x428/O58ACbcM5bjTx7Ag0+/Sm5ODgcO7IvVRymdOD9PLpr3eMgD/q6q7YHjgL+KSIcoLt+vNSuW0KR5S9KataBCxYr0H3o2iz75oFCZzj16U7NWbQA6duvJls2bCt7z5OVx8MAB8vLyOLB/P/UaNIpq/NHQsm4Vtuw9yLY/c/GokrHxD7qm1ShS7tTWR7E0czd7DubFIMrYWfXdEpo2b0UTdxsaOGwkn39caHBbuh57eBvq3L0nWzY792fZu2c3y779iuHnXQRAhYoVqVGzdnQ/QARE6B4PZSJqSU5VN6nqUvf5HmANfu6pGG1bf99Eg0aHw2jQKJWtv28qtvycd17juL79AajfKJULrriOs/t1YfiJ7alWoya9+5xa5jFHW+0qFdixL7fg9a59edSpUqFwmcopdE+ryec/7/Bbx419W/DPAUdzUss6ZRprLGzdvImGjQ9vQw0bl7wNvTf1NU44eQAAWRs3ULtuPe6+7VpGDzuJe8dez/59f5Z5zJEkOC25YB6xEJO7dYlIC6A78L9YLN+bv3tgFHdi45JvFjFn2utce+s4AHb/sYtF8z9g2qfLeO+L1RzYt495700ty3Bjwt/q8F1t53drzPQVm/3ezvzBT9dz7yc/88SiDfQ7pi6t61UtkzhjRf186uK+0Iu/Xsisqa9x3e13A+DJ87B21XecM/oK3piziMpVq/LypEfLMtwyIUE+YiHqSU5EqgPTgRtVdbef96/Kv/Hsrh3F3koxYho0SmXL5qyC11s2Z/vd5Vz3wyoe+OffeOCZN6hVpy4Ai79aQGqTZtSpW4+UChU4+bRhfL/s2zKPOdp27sulbtXDLbfaVVPYdSC3UJnmdavwl+Oacv+QNvRoUpMLe6TSLdXZpf3jgLP7uuegh+VZe2hRt0r0go+CBo1S+X3T4W3o903Z1GvQuEi5n9as5N5/3MDDz75JbXcbatA4lQaNUunUzbkVaf9Bw1m7ckV0Ao+kOM5yUU1yIlIBJ8G9oaoz/JVR1cmqmq6q6bXr1ivzmNp17kHmhvVkb/yV3Jwc5r8/gz79BxUqszk7kzuuu5g7xz9Ds5bHFExvmNqElcsXc2D/PlSVxV8vpHmrNmUec7Rt2LmfBtUrcVTVCiSL0LNpLb7L3lOozB1zfyx4LM3czZtLs1mevYeKyUKlFGczq5gsdGhYnew/DvpbTLnVoUsPftvwM1kbN5Cbk8PHc6bTd8DgQmU2Z23ktmsv4u4Jz9K81eFtqF79hjRs3IQN638CIOOrz2nZum1U44+EJPeOXYEesRDN3lUBXgDWqOoj0VpuICkpKdx050PcfMU5eDwehp0zmlat2/PuWy8BcNYFl/HSxIfYvWsHD4+7FYDklBRenPEpHbumc8rpZ3LZiFNITkmmTfsuDB91SSw/Tpk4pPDWsmxu7NuCJBG+/GUnm3YfpG8r5/jawvU7i523ZuUUrjmhGQDJInz72x+s+r1o72t5lpKSwm3jxnPDJSPxHPJw5rn/x9Ft2jP9jRcBGDn6cp5/8iH+2LmDB+/8uzNPcgqvzloAwC3jHuTOG/9Cbm4Oac1acOdDT8fqo5RaHHeuIgHuyxq5BYn0ARYB3+OcQgJwh3ufRb/ade6uL874NBrhlUsvL88KXOgId1V601iHENcuPrMfq79fFlaO6tS1h8746IugyrZtVG2JqqaHs7xQRa0lp6pfEN8J3xhTCvE+aGZMeleNMQkkyNNHgjkkJyKDRGStiKwTkbF+3h8tIivcx1ci0jVQnXZZlzEmbJFox4lIMvAUMBDIBDJEZJaqrvYq9gtwsqruFJHBwGSgd0n1WpIzxoQpYoNm9gLWqep6ABGZAgwHCpKcqn7lVf4boEmgSm131RgTtgjtrqYBG71eZ1LyVVFXAB+U8D5gLTljTJhCPM+3nogs9no9WVUne1Xly+/pHyJyCk6S6xNogZbkjDHhCz7LbSvhFJJMwPucnyZAdpFFiXQBngcGq+r2QAu03VVjTNgiNApJBtBaRFqKSEVgFDCr0HJEmgEzgItU9cdgYrOWnDEmbJHod1DVPBG5DpgHJAMvquoqERnjvj8JuBM4Cnja7ezIC3RysSU5Y0x4BJIidC6wewXUXJ9pk7yeXwlcGUqdluSMMREQv1c8WJIzxoQlf9DMeGVJzhgTtjjOcZbkjDHhs5acMSahReiyrjJhSc4YE7b4TXGW5IwxYYrlnbiCYUnOGBO2eB4005KcMSZ88ZvjLMkZY8IXxznOkpwxJlyxu91gMCzJGWPCEu9XPNhQS8aYhGYtOWNM2OK5JWdJzhgTNjuFxBiTuOxkYGNMIov3jgdLcsaYsNnuqjEmoVlLzhiT0OI4x1mSM8ZEQBxnOUtyxpiwCMT1ZV2iqrGOoVgishX4NdZxeKkHbIt1EHHM1k9g8baOmqtq/XAqEJEPcT5XMLap6qBwlhequE5y8UZEFge6ke2RzNZPYLaOos+uXTXGJDRLcsaYhGZJLjSTYx1AnLP1E5itoyizY3LGmIRmLTljTEKzJGeMSWiW5IIgIoNEZK2IrBORsbGOJ96IyIsiskVEVsY6lngkIk1F5DMRWSMiq0Tkb7GO6Uhix+QCEJFk4EdgIJAJZAAXqOrqmAYWR0SkL7AXeFVVO8U6nngjIo2Bxqq6VERqAEuAEbYNRYe15ALrBaxT1fWqmgNMAYbHOKa4oqoLgR2xjiNeqeomVV3qPt8DrAHSYhvVkcOSXGBpwEav15nYBmpKSURaAN2B/8U2kiOHJbnA/F15bPv4JmQiUh2YDtyoqrtjHc+RwpJcYJlAU6/XTYDsGMViyikRqYCT4N5Q1RmxjudIYkkusAygtYi0FJGKwChgVoxjMuWIiAjwArBGVR+JdTxHGktyAahqHnAdMA/ngPFUVV0V26jii4i8BXwNtBWRTBG5ItYxxZkTgYuAU0VkufsYEuugjhR2CokxJqFZS84Yk9AsyRljEpolOWNMQrMkZ4xJaJbkjDEJzZJcOSYiHvd0hJUiMk1EqoZR18sico77/HkR6VBC2X4ickIplrFBRIrc1am46T5l9oa4rHEickuoMZrEY0mufNuvqt3ckT9ygDHeb7ojqIRMVa8MMEJGPyDkJGdMLFiSSxyLgGPcVtZnIvIm8L2IJIvIeBHJEJEVInI1OGfhi8hEEVktIu8DDfIrEpEFIpLuPh8kIktF5DsRme9eYD4GuMltRZ4kIvVFZLq7jAwROdGd9ygR+UhElonIswRxn3URmSkiS9xx167yeW+CG8t8EanvTjtaRD5051kkIu0isTJN4kiJdQAmfCKSAgwGPnQn9QI6qeovbqL4Q1V7ikgl4EsR+QhnJIy2QGegIbAaeNGn3vrAc0Bft666qrpDRCYBe1X1Ybfcm8CjqvqFiDTDuTqkPXAX8IWq3iMiQ4FCSasYl7vLqAJkiMh0Vd0OVAOWqurfReROt+7rcG4MM0ZVfxKR3sDTwKmlWI0mQVmSK9+qiMhy9/kinOsjTwC+VdVf3OmnAV3yj7cBtYDWQF/gLVX1ANki8qmf+o8DFubXparFjRk3AOjgXKIJQE13cMi+wNnuvO+LyM4gPtMNInKW+7ypG+t24BDwtjv9dWCGO6rHCcA0r2VXCmIZ5ghiSa5826+q3bwnuF/2P70nAder6jyfckMIPGSUBFEGnMMex6vqfj+xBH3doIj0w0mYx6vqPhFZAFQupri6y93luw6M8WbH5BLfPOAad6gfRKSNiFQDFgKj3GN2jYFT/Mz7NXCyiLR0563rTt8D1PAq9xHOriNuufyksxAY7U4bDNQJEGstYKeb4NrhtCTzJQH5rdELcXaDdwO/iMi57jJERLoGWIY5wliSS3zP4xxvWyrOjWaexWnBvwv8BHwPPAN87jujqm7FOY42Q0S+4/Du4mzgrPyOB+AGIN3t2FjN4V7eu4G+IrIUZ7f5twCxfgikiMgK4D/AN17v/Ql0FJElOMfc7nGnjwaucONbhQ1Nb3zYKCTGmIRmLTljTEKzJGeMSWiW5IwxCc2SnDEmoVmSM8YkNEtyxpiEZknOGJPQ/h/QTR+b4dLyZQAAAABJRU5ErkJggg==\n",
                        "text/plain": [
                            "<Figure size 432x288 with 2 Axes>"
                        ]
                    },
                    "metadata": {
                        "needs_background": "light"
                    },
                    "output_type": "display_data"
                }
            ],
            "source": [
                "plot_confusion_matrix(sentiment_test,dt_predict,normalize=True)\n",
                "plt.title(\"Decision Tree Confuison matrix\",size=18)\n"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## 4.4. Naive Bayes:"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 63,
            "metadata": {},
            "outputs": [{
                "data": {
                    "text/plain": [
                        "0.7876009901987711"
                    ]
                },
                "execution_count": 63,
                "metadata": {},
                "output_type": "execute_result"
            }],
            "source": [
                "nb_params={\"alpha\":[10**i for i in range(-5,5)]}\n",
                "nb_clf=MultinomialNB()\n",
                "rndm_clf=RandomizedSearchCV(nb_clf,nb_params)\n",
                "#rndm_clf.fit(oversampled_trainX,oversampled_trainY)\n",
                "rndm_clf.fit(oversampled_trainX,oversampled_trainY)\n",
                "nb_best_params=rndm_clf.best_params_\n",
                "\n",
                "nb_clf=MultinomialNB(**nb_best_params)\n",
                "nb_clf.fit(oversampled_trainX,oversampled_trainY)\n",
                "nb_predict=nb_clf.predict(reviews_test_tfidf)\n",
                "nb_f1=f1_score(sentiment_test,nb_predict,average=\"weighted\")\n",
                "nb_f1"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 80,
            "metadata": {},
            "outputs": [{
                    "data": {
                        "text/plain": [
                            "Text(0.5, 1.0, 'Naive Bayes Confusion Matrix')"
                        ]
                    },
                    "execution_count": 80,
                    "metadata": {},
                    "output_type": "execute_result"
                },
                {
                    "data": {
                        "image/png": "\n",
                        "text/plain": [
                            "<Figure size 432x288 with 2 Axes>"
                        ]
                    },
                    "metadata": {
                        "needs_background": "light"
                    },
                    "output_type": "display_data"
                }
            ],
            "source": [
                "plot_confusion_matrix(sentiment_test,nb_predict,normalize=True,cmap=\"Reds\")\n",
                "plt.title(\"Naive Bayes Confusion Matrix\",size=15)"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## 4.5. Random Forrests"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 50,
            "metadata": {},
            "outputs": [],
            "source": [
                "from sklearn.ensemble import RandomForestClassifier\n",
                "param_rf={'max_depth':[2,3,4,5,6,7,8,9,10],'n_estimators':[i for i in range(1,1000,5)]}\n",
                "clf=RandomForestClassifier()\n",
                "rndm_clf=RandomizedSearchCV(clf,param_rf)\n",
                "rndm_clf.fit(oversampled_trainX,oversampled_trainY)\n",
                "rf_best_params=rndm_clf.best_params_\n"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 51,
            "metadata": {},
            "outputs": [],
            "source": [
                "rf_clf=RandomForestClassifier(**rf_best_params,class_weight='balanced')\n",
                "rf_clf.fit(oversampled_trainX,oversampled_trainY)\n",
                "rf_predict=rf_clf.predict(reviews_test_tfidf)"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 52,
            "metadata": {},
            "outputs": [{
                    "data": {
                        "text/plain": [
                            "Text(0.5, 1.0, 'Random forrests Confusion Matrix')"
                        ]
                    },
                    "execution_count": 52,
                    "metadata": {},
                    "output_type": "execute_result"
                },
                {
                    "data": {
                        "image/png": "\n",
                        "text/plain": [
                            "<Figure size 432x288 with 2 Axes>"
                        ]
                    },
                    "metadata": {
                        "needs_background": "light"
                    },
                    "output_type": "display_data"
                }
            ],
            "source": [
                "plot_confusion_matrix(sentiment_test,rf_predict,normalize=True)\n",
                "plt.title(\"Random forrests Confusion Matrix\",size=15)"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 53,
            "metadata": {},
            "outputs": [{
                "data": {
                    "text/plain": [
                        "0.73163071010915"
                    ]
                },
                "execution_count": 53,
                "metadata": {},
                "output_type": "execute_result"
            }],
            "source": [
                "rf_f1=f1_score(sentiment_test,rf_predict,average=\"weighted\")\n",
                "rf_f1"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "# 5. Model evaluation:\n",
                "    "
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 54,
            "metadata": {},
            "outputs": [],
            "source": [
                "models=[\"LinearRegression\",\"DecisionTrees\",\"SVM\",\"NaiveBayes\",\"Random Forrests\"]\n",
                "f1_scores=[lr_bal_f1,dt_f1,svc_f1,nb_f1,rf_f1]"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 66,
            "metadata": {},
            "outputs": [{
                "data": {
                    "image/png": "\n",
                    "text/plain": [
                        "<Figure size 432x360 with 1 Axes>"
                    ]
                },
                "metadata": {
                    "needs_background": "light"
                },
                "output_type": "display_data"
            }],
            "source": [
                "plt.figure(figsize=(6,5))\n",
                "plt.barh(models,f1_scores,color=['c','r','m','y','b'])\n",
                "plt.title(\"F1 Scores of all models\",size=20)\n",
                "for index, value in enumerate(f1_scores):\n",
                "    plt.text(0.9,index,str(round(value,2)))\n",
                "plt.xlabel('F1_SCores',size=15)\n",
                "plt.ylabel(\"Models\",size=15)\n",
                "plt.savefig(\"f1_scores.png\")\n",
                "plt.show()\n"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "#### Obseravtions:\n",
                "1. Almost all models have same f1_Score,except Random forrest being the least in the list.\n",
                "2. After cross checking the confusion matrices of above models, Naive Bayes is slightly better than rest of the models. \n",
                "3. We will select Naive Bayes for our problem, lets Pickle the model for later use.\n"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 81,
            "metadata": {},
            "outputs": [],
            "source": [
                "# lets save the model\n",
                "import pickle\n",
                "pickle.dump(svc_model,open(\"nb_clf.pkl\",\"wb\"))\n",
                "pickle.dump(tfidf_model,open(\"tfidf_model.pkl\",\"wb\"))"
            ]
        }
    ],
    "metadata": {
        "kernelspec": {
            "display_name": "Python 3",
            "language": "python",
            "name": "python3"
        },
        "language_info": {
            "codemirror_mode": {
                "name": "ipython",
                "version": 3
            },
            "file_extension": ".py",
            "mimetype": "text/x-python",
            "name": "python",
            "nbconvert_exporter": "python",
            "pygments_lexer": "ipython3",
            "version": "3.7.4"
        }
    },
    "nbformat": 4,
    "nbformat_minor": 2
}